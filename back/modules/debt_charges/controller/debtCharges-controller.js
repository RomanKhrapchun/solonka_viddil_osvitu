
const debtChargesService = require("../service/debtCharges-service");
const Logger = require("../../../utils/logger");

class DebtChargesController {

    // –î–æ–¥–∞—Ç–∏ —Ü–µ–π –º–µ—Ç–æ–¥ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ debtChargesController

    async generateTaxNotification(request, reply) {
        try {
            //console.log('üîç Tax notification generation requested for ID:', request.params.id);
            
            const result = await debtChargesService.generateTaxNotificationById(request, reply);
            
            // –Ø–∫—â–æ —Å–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É (—è–∫ —É debtor), –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
            return result;
            
        } catch (error) {
            console.error('‚ùå Tax notification controller error:', error);
            Logger.error(error.message, { stack: error.stack });
            
            if (error?.response?.status === 401) {
                return reply.status(401).send({
                    message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π"
                });
            }
            
            return reply.status(400).send({
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
            });
        }
    }

    async getDebtChargeById(request, reply) {
        try {
            const debtChargeData = await debtChargesService.getDebtChargeById(request)
            return reply.send(debtChargeData)
        } catch (error) {
            Logger.error(error.message, { stack: error.stack })
            reply.status(400).send(error)
        }
    }

    async findDebtChargesByFilter(request, reply) {
        try {
            const debtChargesData = await debtChargesService.findDebtChargesByFilter(request)
            return reply.send(debtChargesData)
        } catch (error) {
            Logger.error(error.message, { stack: error.stack })
            reply.status(400).send(error)
        }
    }

    async uploadExcelFile(request, reply) {
        try {
            const uploadResult = await debtChargesService.processExcelUpload(request)
            return reply.send(uploadResult)
        } catch (error) {
            Logger.error(error.message, { stack: error.stack })
            reply.status(400).send({ message: error.message })
        }
    }

    async getStatistics(request, reply) {
        try {
            const stats = await debtChargesService.getStatistics(request)
            return reply.send(stats)
        } catch (error) {
            Logger.error(error.message, { stack: error.stack })
            reply.status(400).send(error)
        }
    }

    async getReferenceData(request, reply) {
        try {
            const data = await debtChargesService.getReferenceData(request)
            return reply.send(data)
        } catch (error) {
            Logger.error(error.message, { stack: error.stack })
            reply.status(400).send(error)
        }
    }
}

module.exports = new DebtChargesController();