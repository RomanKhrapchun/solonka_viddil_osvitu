const { RouterGuard } = require('../../../helpers/Guard');
const { accessLevel } = require('../../../utils/constants');
const { viewLimit } = require('../../../utils/ratelimit');
const debtChargesController = require('../controller/debtCharges-controller');
const { debtChargesFilterSchema, debtChargesInfoSchema } = require('../schema/debtCharges-schema');

const routes = async (fastify) => {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
    fastify.post("/filter", { 
        schema: debtChargesFilterSchema, 
        preParsing: RouterGuard({ permissionLevel: "debtor", permissions: accessLevel.VIEW }) 
    }, debtChargesController.findDebtChargesByFilter);
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
    fastify.get("/info/:id", { 
        schema: debtChargesInfoSchema, 
        preParsing: RouterGuard({ permissionLevel: "debtor", permissions: accessLevel.VIEW }), 
        config: viewLimit 
    }, debtChargesController.getDebtChargeById);
    
    // –ù–û–í–ò–ô –ï–ù–î–ü–û–Ü–ù–¢: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    fastify.get("/generate/:id", { 
        schema: debtChargesInfoSchema, 
        preParsing: RouterGuard({ permissionLevel: "debtor", permissions: accessLevel.VIEW }) 
    }, debtChargesController.generateTaxNotification);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é multipart
    fastify.post("/upload", { 
        preParsing: RouterGuard({ permissionLevel: "debtor", permissions: accessLevel.EDIT }) 
    }, async (request, reply) => {
        try {
            console.log('üîç Upload route called');
            
            let fileData = null;
            let buffer = null;
            
            // –§–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ request.body.file
            if (request.body && request.body.file) {
                console.log('‚úÖ Found file in request.body.file');
                fileData = request.body.file;
                
                console.log('üìÅ File info:', {
                    filename: fileData.filename,
                    mimetype: fileData.mimetype,
                    encoding: fileData.encoding,
                    fieldname: fileData.fieldname,
                    hasBuf: !!fileData._buf,
                    hasToBuffer: typeof fileData.toBuffer === 'function',
                    bufSize: fileData._buf?.length
                });
                
                // –û—Ç—Ä–∏–º—É—î–º–æ buffer
                if (fileData._buf) {
                    console.log('üîÑ Using _buf directly...');
                    buffer = fileData._buf;
                    console.log('üìä Buffer from _buf, size:', buffer.length);
                } else if (typeof fileData.toBuffer === 'function') {
                    console.log('üîÑ Using toBuffer() method...');
                    buffer = await fileData.toBuffer();
                    console.log('üìä Buffer from toBuffer(), size:', buffer.length);
                } else if (fileData.file && typeof fileData.file.read === 'function') {
                    console.log('üîÑ Reading from file stream...');
                    const chunks = [];
                    
                    fileData.file.on('data', (chunk) => {
                        chunks.push(chunk);
                    });
                    
                    await new Promise((resolve) => {
                        fileData.file.on('end', () => {
                            buffer = Buffer.concat(chunks);
                            console.log('üìä Buffer from stream, size:', buffer.length);
                            resolve();
                        });
                    });
                }
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (!fileData || !buffer) {
                console.log('‚ùå No file data or buffer found');
                return reply.status(400).send({ 
                    message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª –∞–±–æ –π–æ–≥–æ –¥–∞–Ω—ñ',
                    debug: {
                        hasFileData: !!fileData,
                        hasBuffer: !!buffer,
                        filename: fileData?.filename
                    }
                });
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –æ–±'—î–∫—Ç —Ñ–∞–π–ª—É
            request.file = {
                originalname: fileData.filename || 'unknown',
                filename: fileData.filename || 'unknown',
                mimetype: fileData.mimetype || '',
                size: buffer.length,
                buffer: buffer,
                fieldname: fileData.fieldname || 'file',
                encoding: fileData.encoding || '7bit'
            };
            
            console.log('‚úÖ File object created:', {
                originalname: request.file.originalname,
                size: request.file.size,
                mimetype: request.file.mimetype
            });
            
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
            return await debtChargesController.uploadExcelFile(request, reply);
            
        } catch (error) {
            console.error('‚ùå Route upload error:', error);
            reply.status(400).send({ 
                message: error.message,
                stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    fastify.get("/statistics", { 
        preParsing: RouterGuard({ permissionLevel: "debtor", permissions: accessLevel.VIEW }) 
    }, debtChargesController.getStatistics);
    
    // –î–æ–≤—ñ–¥–Ω–∏–∫–æ–≤—ñ –¥–∞–Ω—ñ
    fastify.get("/reference-data", { 
        preParsing: RouterGuard({ permissionLevel: "debtor", permissions: accessLevel.VIEW }) 
    }, debtChargesController.getReferenceData);
}

module.exports = routes;