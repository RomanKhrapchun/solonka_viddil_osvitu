import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';
import readline from 'readline';

// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  purple: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  bold: '\x1b[1m'
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
const log = {
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  step: (msg) => console.log(`\n${colors.bold}${colors.blue}${msg}${colors.reset}`),
  title: (msg) => console.log(`${colors.bold}${colors.purple}${msg}${colors.reset}`),
  pm2: (msg) => console.log(`${colors.cyan}üîÑ ${msg}${colors.reset}`),
  test: (msg) => console.log(`${colors.yellow}üß™ ${msg}${colors.reset}`)
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
function runCommand(command, description, options = {}) {
  log.info(`–í–∏–∫–æ–Ω—É—î–º–æ: ${command}`);
  
  try {
    const result = execSync(command, {
      stdio: options.silent ? 'pipe' : 'inherit',
      encoding: 'utf8',
      cwd: process.cwd(),
      ...options
    });
    
    if (!options.silent) {
      log.success(`${description} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    }
    
    return { success: true, output: result };
  } catch (error) {
    log.error(`${description} - –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å!`);
    
    if (error.stdout) {
      console.log('üìÑ –í–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏:');
      console.log(error.stdout);
    }
    
    if (error.stderr) {
      console.log('üìÑ –ü–æ–º–∏–ª–∫–∏:');
      console.log(error.stderr);
    }
    
    return { success: false, error: error.message, code: error.status };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
function fileExists(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch {
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
function countTestFiles(dirPath) {
  try {
    let count = 0;
    const testFiles = [];
    
    function searchFiles(dir) {
      try {
        const entries = fs.readdirSync(dir, { withFileTypes: true });
        for (const entry of entries) {
          const fullPath = path.join(dir, entry.name);
          if (entry.isDirectory() && 
              entry.name !== 'node_modules' && 
              entry.name !== '.git' && 
              entry.name !== 'dist' &&
              entry.name !== 'coverage') {
            searchFiles(fullPath);
          } else if (entry.isFile()) {
            const isTestFile = entry.name.endsWith('.test.js') || 
                              entry.name.endsWith('.spec.js') ||
                              entry.name.endsWith('.test.mjs') || 
                              entry.name.endsWith('.spec.mjs');
            if (isTestFile) {
              count++;
              testFiles.push(path.relative(dirPath, fullPath));
            }
          }
        }
      } catch {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É
      }
    }
    
    searchFiles(dirPath);
    return { count, files: testFiles };
  } catch {
    return { count: 0, files: [] };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É PM2 –ø—Ä–æ—Ü–µ—Å—É
function checkPM2Status(appName) {
  try {
    const result = execSync(`pm2 describe ${appName}`, { encoding: 'utf8', stdio: 'pipe' });
    const isOnline = result.includes('online');
    const isStopped = result.includes('stopped');
    return { 
      exists: true, 
      isOnline,
      isStopped,
      output: result 
    };
  } catch {
    return { exists: false, isOnline: false, isStopped: false };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç
function getProjectInfo() {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    return {
      name: packageJson.name || 'unknown',
      version: packageJson.version || 'unknown',
      scripts: packageJson.scripts || {},
      dependencies: Object.keys(packageJson.dependencies || {}),
      devDependencies: Object.keys(packageJson.devDependencies || {})
    };
  } catch {
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ª–æ–≥—ñ–≤ PM2
function openPM2Logs(appName) {
  const platform = os.platform();
  
  try {
    if (platform === 'win32') {
      execSync(`start cmd /k "pm2 logs ${appName}"`, { stdio: 'ignore' });
      log.success('–õ–æ–≥–∏ PM2 –≤—ñ–¥–∫—Ä–∏—Ç–æ –≤ –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ');
    } else {
      log.info(`–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤ –≤–∏–∫–æ–Ω–∞–π—Ç–µ: pm2 logs ${appName}`);
    }
  } catch {
    log.warning('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ª–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ');
    log.info(`–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤ –≤–∏–∫–æ–Ω–∞–π—Ç–µ: pm2 logs ${appName}`);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function askUser(question) {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function testAndDeploy() {
  const startTime = Date.now();
  const appName = 'adminka';
  
  console.clear();
  log.title('üß™ Test & Deploy - Node.js Backend');
  log.title('===================================');
  console.log(`üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${os.platform()}`);
  console.log(`üìç Node.js: ${process.version}`);
  console.log(`üìç –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ${process.cwd()}`);
  console.log(`üìç PM2 App: ${appName}`);
  
  // –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  log.step('1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...');
  
  if (!fileExists('package.json')) {
    log.error('package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    log.warning('–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ –≤–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó backend/');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  log.success('package.json –∑–Ω–∞–π–¥–µ–Ω–æ');
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç
  const projectInfo = getProjectInfo();
  if (projectInfo) {
    log.success(`–ü—Ä–æ–µ–∫—Ç: ${projectInfo.name} v${projectInfo.version}`);
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
  const nodeCheck = runCommand('node --version', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js', { silent: true });
  const npmCheck = runCommand('npm --version', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm', { silent: true });
  const pm2Check = runCommand('pm2 --version', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2', { silent: true });
  
  if (!nodeCheck.success || !npmCheck.success) {
    log.error('Node.js –∞–±–æ npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  if (!pm2Check.success) {
    log.error('PM2 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    console.log('\nüí° –î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PM2:');
    console.log('   npm install -g pm2');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  log.success('–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
  
  // –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
  log.step('2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
  
  if (!fileExists('node_modules')) {
    log.warning('node_modules –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ...');
    const installResult = runCommand('npm install', '–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π');
    if (!installResult.success) {
      log.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ');
      await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
      process.exit(1);
    }
  } else {
    log.success('node_modules –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
  
  // –ö—Ä–æ–∫ 3: –ü–æ—à—É–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
  log.step('3Ô∏è‚É£ –ü–æ—à—É–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...');
  
  const testInfo = countTestFiles('.');
  
  if (testInfo.count === 0) {
    log.warning('–¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!');
    console.log('\nüí° –®—É–∫–∞–≤ —Ñ–∞–π–ª–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏: .test.js, .spec.js, .test.mjs, .spec.mjs');
    console.log('üí° –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: tests/, test/, __tests__, spec/');
    
    const answer = await askUser('\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ —Ç–µ—Å—Ç—ñ–≤? (y/n): ');
    if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
      log.error('–ü—Ä–æ—Ü–µ—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
      await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
      process.exit(1);
    }
    
    log.warning('–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤...');
  } else {
    log.success(`–ó–Ω–∞–π–¥–µ–Ω–æ ${testInfo.count} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤`);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    console.log('\nüìã –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏:');
    testInfo.files.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file}`);
    });
  }
  
  // –ö—Ä–æ–∫ 4: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
  if (testInfo.count > 0) {
    log.step('4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...');
    
    let testResult = null;
    
    // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤
    if (projectInfo?.scripts?.test) {
      log.test('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ npm test...');
      testResult = runCommand('npm test', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ —á–µ—Ä–µ–∑ npm test');
    } else {
      // –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
      const testCommands = [
        { cmd: 'npx jest', desc: 'Jest —Ç–µ—Å—Ç–∏' },
        { cmd: 'npx mocha tests/**/*.js', desc: 'Mocha —Ç–µ—Å—Ç–∏' },
        { cmd: 'npx mocha test/**/*.js', desc: 'Mocha —Ç–µ—Å—Ç–∏ (test/)' },
        { cmd: 'npx vitest run', desc: 'Vitest —Ç–µ—Å—Ç–∏' },
        { cmd: 'node --test', desc: 'Native Node.js —Ç–µ—Å—Ç–∏' }
      ];
      
      for (const { cmd, desc } of testCommands) {
        log.test(`–ü—Ä–æ–±—É—î–º–æ: ${cmd}`);
        testResult = runCommand(cmd, desc);
        
        if (testResult.success) {
          break;
        }
      }
    }
    
    // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤
    if (!testResult || !testResult.success) {
      log.error('–¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–¨! üö´');
      
      console.log('\n' + '='.repeat(50));
      console.log('üö´ –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò');
      console.log('='.repeat(50));
      console.log('\n‚ùå –ß–û–ú–£ DEPLOY –ó–ê–ë–õ–û–ö–û–í–ê–ù–û:');
      console.log('   ‚Ä¢ –¢–µ—Å—Ç–∏ –≤–∏—è–≤–∏–ª–∏ –ø–æ–º–∏–ª–∫–∏ –≤ –∫–æ–¥—ñ');
      console.log('   ‚Ä¢ –†–µ—Å—Ç–∞—Ä—Ç –ø–æ–ª–∞–º–∞–Ω–æ–≥–æ –∫–æ–¥—É = –∑–±—ñ–π production —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥–µ–ø–ª–æ—é –Ω–µ—è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–¥—É');
      
      console.log('\nüõ†Ô∏è  –©–û –ü–û–¢–†–Ü–ë–ù–û –ó–†–û–ë–ò–¢–ò:');
      console.log('   1. –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –í–ò–©–ï –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–µ—Å—Ç—ñ–≤');
      console.log('   2. –í–∏–ø—Ä–∞–≤—Ç–µ –∫–æ–¥ —â–æ–± –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏');
      console.log('   3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ: npm test');
      console.log('   4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è');
      
      console.log('\nüí° –ö–û–†–ò–°–ù–Ü –ö–û–ú–ê–ù–î–ò –î–õ–Ø –î–ï–ë–ê–ì–£:');
      if (projectInfo?.scripts?.test) {
        console.log('   ‚Ä¢ npm test -- --verbose - –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ —Ç–µ—Å—Ç—ñ–≤');
      }
      console.log('   ‚Ä¢ npm run test:watch - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤');
      console.log('   ‚Ä¢ npm run test:coverage - –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É —Ç–µ—Å—Ç–∞–º–∏');
      
      console.log('\n' + '='.repeat(50));
      console.log('‚ùå DEPLOY –°–ö–ê–°–û–í–ê–ù–û –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò');
      console.log('='.repeat(50));
      
      await askUser('\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
      process.exit(1);
    }
    
    // –¢–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ
    log.success('üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!');
    console.log('\n‚úÖ –ö–æ–¥ –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –¥–µ–ø–ª–æ—é –≤ production');
  }
  
  // –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2 —Å—Ç–∞—Ç—É—Å—É
  log.step('5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PM2 —Å—Ç–∞—Ç—É—Å—É...');
  
  const pm2Status = checkPM2Status(appName);
  
  if (pm2Status.exists) {
    if (pm2Status.isOnline) {
      log.success(`PM2 –ø—Ä–æ—Ü–µ—Å "${appName}" –ø—Ä–∞—Ü—é—î (ONLINE)`);
    } else if (pm2Status.isStopped) {
      log.warning(`PM2 –ø—Ä–æ—Ü–µ—Å "${appName}" –∑—É–ø–∏–Ω–µ–Ω–æ (STOPPED)`);
    } else {
      log.warning(`PM2 –ø—Ä–æ—Ü–µ—Å "${appName}" –≤ –Ω–µ–≤—ñ–¥–æ–º–æ–º—É —Å—Ç–∞–Ω—ñ`);
    }
  } else {
    log.warning(`PM2 –ø—Ä–æ—Ü–µ—Å "${appName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    log.info('–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å');
  }
  
  // –ö—Ä–æ–∫ 6: PM2 Restart/Start
  log.step('6Ô∏è‚É£ –û–Ω–æ–≤–ª–µ–Ω–Ω—è PM2 –ø—Ä–æ—Ü–µ—Å—É...');
  
  let deployResult = false;
  
  if (pm2Status.exists) {
    // –ü—Ä–æ—Ü–µ—Å —ñ—Å–Ω—É—î - —Ä–µ—Å—Ç–∞—Ä—Ç—É—î–º–æ
    log.pm2(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å "${appName}"...`);
    console.log('üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è "hot restart" –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –∑\'—î–¥–Ω–∞–Ω—å...');
    
    const restartResult = runCommand(`pm2 restart ${appName}`, 'PM2 Restart');
    deployResult = restartResult.success;
    
    if (deployResult) {
      log.success('–ü—Ä–æ—Ü–µ—Å —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ');
    }
  } else {
    // –ü—Ä–æ—Ü–µ—Å –Ω–µ —ñ—Å–Ω—É—î - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
    log.pm2(`–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å "${appName}"...`);
    
    // –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É
    const possibleFiles = ['app.js', 'server.js', 'index.js', 'src/app.js', 'src/server.js'];
    let mainFile = null;
    
    for (const file of possibleFiles) {
      if (fileExists(file)) {
        mainFile = file;
        break;
      }
    }
    
    let startResult = null;
    
    if (fileExists('ecosystem.config.js')) {
      log.info('–ó–Ω–∞–π–¥–µ–Ω–æ ecosystem.config.js');
      startResult = runCommand('pm2 start ecosystem.config.js', 'PM2 Start –∑ ecosystem');
    } else if (projectInfo?.scripts?.start) {
      log.info('–ó–Ω–∞–π–¥–µ–Ω–æ npm start script');
      startResult = runCommand(`pm2 start npm --name ${appName} -- start`, 'PM2 Start –∑ npm script');
    } else if (mainFile) {
      log.info(`–ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª: ${mainFile}`);
      startResult = runCommand(`pm2 start ${mainFile} --name ${appName}`, 'PM2 Start');
    } else {
      log.error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É!');
      console.log('üí° –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ —Ñ–∞–π–ª—ñ–≤: app.js, server.js, index.js');
      await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
      process.exit(1);
    }
    
    deployResult = startResult?.success || false;
    
    if (deployResult) {
      log.success('–ü—Ä–æ—Ü–µ—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ');
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–µ–ø–ª–æ—é
  if (!deployResult) {
    log.error('PM2 –û–ü–ï–†–ê–¶–Ü–Ø –ü–†–û–í–ê–õ–ò–õ–ê–°–¨! üö´');
    
    console.log('\n' + '='.repeat(50));
    console.log('üö´ –ü–û–ú–ò–õ–ö–ê –î–ï–ü–õ–û–Æ');
    console.log('='.repeat(50));
    console.log('\n‚ùå –ú–û–ñ–õ–ò–í–Ü –ü–†–ò–ß–ò–ù–ò:');
    console.log('   ‚Ä¢ –ü–æ—Ä—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º');
    console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∞–±–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ API');
    console.log('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (.env)');
    console.log('   ‚Ä¢ Runtime –ø–æ–º–∏–ª–∫–∏ —â–æ –Ω–µ –≤–∏—è–≤–∏–ª–∏ —Ç–µ—Å—Ç–∏');
    
    console.log('\nüîç –î–ï–ë–ê–ì–Ü–ù–ì:');
    console.log(`   ‚Ä¢ pm2 logs ${appName} - –¥–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –ø–æ–º–∏–ª–æ–∫`);
    console.log(`   ‚Ä¢ pm2 describe ${appName} - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å`);
    console.log('   ‚Ä¢ pm2 list - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤');
    console.log('   ‚Ä¢ netstat -an | grep :3000 - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—É');
    
    console.log('\nüí° –®–í–ò–î–ö–Ü –†–Ü–®–ï–ù–ù–Ø:');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª —Ç–∞ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    
    console.log('\n' + '='.repeat(50));
    
    const showLogs = await askUser('\n–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ PM2 –¥–ª—è –¥–µ–±–∞–≥—É? (y/n): ');
    if (showLogs.toLowerCase() === 'y' || showLogs.toLowerCase() === 'yes') {
      console.log(`\nüìã –õ–æ–≥–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É "${appName}":`);
      console.log('-'.repeat(50));
      runCommand(`pm2 logs ${appName} --lines 20`, 'PM2 Logs');
    }
    
    await askUser('\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  // –ö—Ä–æ–∫ 7: –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
  log.step('7Ô∏è‚É£ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–ø—É—Å–∫—É...');
  
  log.info('–û—á—ñ–∫—É—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É...');
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  const finalStatus = checkPM2Status(appName);
  
  if (finalStatus.exists && finalStatus.isOnline) {
    log.success('‚úÖ –ü—Ä–æ—Ü–µ—Å –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ (ONLINE)');
  } else {
    log.warning('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å –º–æ–∂–µ –º–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º');
    console.log(`üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ: pm2 logs ${appName}`);
  }
  
  // –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
  const endTime = Date.now();
  const duration = Math.round((endTime - startTime) / 1000);
  
  console.log('\n' + '='.repeat(60));
  log.title('üéâ TEST & DEPLOY –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!');
  console.log('='.repeat(60));
  
  console.log('\nüìä –ü–Ü–î–°–£–ú–û–ö –û–ü–ï–†–ê–¶–Ü–ô:');
  console.log(`  ‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${duration} —Å–µ–∫—É–Ω–¥`);
  console.log(`  üß™ –¢–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: ${testInfo.count}`);
  console.log(`  üü¢ –¢–µ—Å—Ç–∏: ${testInfo.count > 0 ? '–ü–†–û–ô–®–õ–ò ‚úÖ' : '–ü–†–û–ü–£–©–ï–ù–Ü ‚ö†Ô∏è'}`);
  console.log(`  üîÑ PM2 –æ–ø–µ—Ä–∞—Ü—ñ—è: ${pm2Status.exists ? 'RESTART' : 'START'} ‚úÖ`);
  console.log(`  üì± –ü—Ä–æ—Ü–µ—Å: ${appName} (ONLINE) ‚úÖ`);
  
  console.log('\nüéØ –°–¢–ê–¢–£–° –î–ï–ü–õ–û–Æ:');
  console.log('  ‚úÖ –ö–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ');
  console.log('  ‚úÖ PM2 –ø—Ä–æ—Ü–µ—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');  
  console.log('  ‚úÖ Backend –≥–æ—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–ø–∏—Ç–∏');
  console.log('  üåê Production —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ!');
  
  console.log('\nüí° –ö–û–†–ò–°–ù–Ü –ö–û–ú–ê–ù–î–ò –î–õ–Ø –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£:');
  console.log(`  üìà pm2 monit - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ`);
  console.log(`  üìã pm2 logs ${appName} - –ø–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤`);
  console.log(`  üìä pm2 describe ${appName} - –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è`);
  console.log(`  üîÑ pm2 restart ${appName} - —Ä—É—á–Ω–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç`);
  console.log('  üì± pm2 list - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤');
  
  console.log('\n' + '='.repeat(60));
  
  // –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏
  const viewLogs = await askUser('\nüîç –í—ñ–¥–∫—Ä–∏—Ç–∏ –ª–æ–≥–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–æ–±–æ—Ç–∏? (y/n): ');
  if (viewLogs.toLowerCase() === 'y' || viewLogs.toLowerCase() === 'yes') {
    openPM2Logs(appName);
  }
  
  console.log('\n‚ú® –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Test & Deploy —Å–∫—Ä–∏–ø—Ç–∞!');
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
process.on('uncaughtException', async (error) => {
  log.error(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
  console.log('\nüîç Stack trace:');
  console.log(error.stack);
  await askUser('\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(1);
});

process.on('unhandledRejection', async (reason, promise) => {
  log.error(`Unhandled Promise Rejection: ${reason}`);
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(1);
});

process.on('SIGINT', async () => {
  log.warning('\n\n–ü—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ—Ä–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C)');
  console.log('üõë –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞');
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  log.warning('\n–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ—é');
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
testAndDeploy().catch(async (error) => {
  log.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞: ${error.message}`);
  console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:');
  console.log(error.stack);
  await askUser('\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(1);
});