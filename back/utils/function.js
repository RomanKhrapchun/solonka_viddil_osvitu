
const { updateDataMissingError } = require("./messages");
const fs = require('fs')
const fsPromise = require('fs/promises')

const paginate = (page, limit) => {
    const offset = (page - 1) * limit;
    return { offset };
};

const paginationData = (result, page, limit) => {
    const { count, data } = result;
    const totalPages = Math.ceil(count / limit);
    return { totalItems: count, items: data, totalPages, currentPage: page };
};

const filterRequestBody = (requestBody) => {
    if (!Object.keys(requestBody).length) {
        throw new Error(updateDataMissingError);
    }
    return Object.keys(requestBody)
        .reduce((acc, key) => {
            let value = requestBody[key];
            if (typeof value === 'string' && value.trim() !== '') {
                value = value.replace(/\s\s+/g, ' ');
            }
            return { ...acc, [key]: value || typeof value === 'boolean' ? value : null };
        }, {});
}

const filterData = (object, array) => {
    const filteredObject = {};

    for (const key of array) {
        if (object.hasOwnProperty(key)) {
            filteredObject[key] = object[key];
        }
    }

    return filteredObject;
};

function isValidDate(dateString) {
    const regex_date = /^\d{4}\-\d{1,2}\-\d{1,2}$/;

    if (!regex_date.test(dateString)) {
        return false;
    }

    const parts = dateString.split("-");
    const day = parseInt(parts[2], 10);
    const month = parseInt(parts[1], 10);
    const year = parseInt(parts[0], 10);

    if (year < 1000 || year > 3000 || month == 0 || month > 12) {
        return false;
    }

    const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)) {
        monthLength[1] = 29;
    }

    return day > 0 && day <= monthLength[month - 1];
}

const debtCols = [
    'non_residential_debt',
    'residential_debt',
    'land_debt',
    'orenda_debt',
    'mpz',
];

const buildWhereCondition = (whereConditions) => {
    const values = []
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —É–º–æ–≤–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ null –∑–Ω–∞—á–µ–Ω—å
    const filteredConditions = Object.keys(whereConditions).filter(key => {
        return whereConditions[key] !== null && whereConditions[key] !== undefined;
    });

    // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å —É–º–æ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é —É–º–æ–≤—É
    if (filteredConditions.length === 0) {
        return {
            text: '',
            value: [],
        };
    }

    const conditions = filteredConditions.map(key => {
        /* üîπ –ü–û–®–£–ö –ó–ê –î–Ü–ê–ü–ê–ó–û–ù–û–ú –°–£–ú */
        if (key === 'debt_amount_min') {
            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null/undefined
            if (whereConditions[key] === null || whereConditions[key] === undefined) {
                return null; // –¶–µ–π –µ–ª–µ–º–µ–Ω—Ç –±—É–¥–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ
            }
            
            // –ë—É–¥—É—î–º–æ —É–º–æ–≤—É "—Å—É–º–∞ –≤—Å—ñ—Ö –±–æ—Ä–≥—ñ–≤ >= –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è"
            // –í–∏—Ä–∞–∑ —Å—É–º–∏ –≤—Å—ñ—Ö –±–æ—Ä–≥—ñ–≤
            const sumExpression = `(COALESCE(non_residential_debt, 0) + COALESCE(residential_debt, 0) + COALESCE(land_debt, 0) + COALESCE(orenda_debt, 0) + COALESCE(mpz, 0))`;
            values.push(parseFloat(whereConditions[key]));
            return `${sumExpression} >= ?`;
        }
        
        if (key === 'debt_amount_max') {
            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null/undefined
            if (whereConditions[key] === null || whereConditions[key] === undefined) {
                return null; // –¶–µ–π –µ–ª–µ–º–µ–Ω—Ç –±—É–¥–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ
            }
            
            // –ë—É–¥—É—î–º–æ —É–º–æ–≤—É "—Å—É–º–∞ –≤—Å—ñ—Ö –±–æ—Ä–≥—ñ–≤ <= –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è"
            // –í–∏—Ä–∞–∑ —Å—É–º–∏ –≤—Å—ñ—Ö –±–æ—Ä–≥—ñ–≤
            const sumExpression = `(COALESCE(non_residential_debt, 0) + COALESCE(residential_debt, 0) + COALESCE(land_debt, 0) + COALESCE(orenda_debt, 0) + COALESCE(mpz, 0))`;
            values.push(parseFloat(whereConditions[key]));
            return `${sumExpression} <= ?`;
        }
        
        /* üîπ –ù–û–í–ò–ô: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–æ–º –ø–æ–¥–∞—Ç–∫—É */
        if (key === 'tax_type') {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ
            const validTaxTypes = ['mpz', 'residential_debt', 'non_residential_debt', 'land_debt', 'orenda_debt'];
            if (!validTaxTypes.includes(whereConditions[key])) {
                return null; // –Ø–∫—â–æ —Ç–∏–ø –ø–æ–¥–∞—Ç–∫—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, —ñ–≥–Ω–æ—Ä—É—î–º–æ
            }
            
            // –ë—É–¥—É—î–º–æ —É–º–æ–≤—É: –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Å–∏ –∑ –±–æ—Ä–≥–æ–º –ø–æ –≤–∏–±—Ä–∞–Ω–æ–º—É —Ç–∏–ø—É –ø–æ–¥–∞—Ç–∫—É
            return `COALESCE(${whereConditions[key]}, 0) > 0`;
        }
        
        /* üîπ –ù–û–í–ò–ô: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –±–æ—Ä–∂–Ω–∏–∫—ñ–≤ */
        if (key === 'only_debtors') {
            // –Ø–∫—â–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É true, –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –±–æ—Ä–≥–∞–º–∏
            if (whereConditions[key] === true || whereConditions[key] === 'true') {
                const sumExpression = `(COALESCE(non_residential_debt, 0) + COALESCE(residential_debt, 0) + COALESCE(land_debt, 0) + COALESCE(orenda_debt, 0) + COALESCE(mpz, 0))`;
                return `${sumExpression} > 0`;
            }
            // –Ø–∫—â–æ false –∞–±–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, –Ω–µ –¥–æ–¥–∞—î–º–æ –∂–æ–¥–Ω–æ—ó —É–º–æ–≤–∏
            return null;
        }
        
        /* üîπ –°—Ç–∞—Ä–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è —Ç–æ—á–Ω–æ—ó —Å—É–º–∏, –∑–∞–ª–∏—à–∞—é –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ */
        if (key === 'debt_amount') {
            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null/undefined
            if (whereConditions[key] === null || whereConditions[key] === undefined) {
                return null; // –¶–µ–π –µ–ª–µ–º–µ–Ω—Ç –±—É–¥–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ
            }
            
            const search = `%${whereConditions[key]}%`;   // ‚ûú '%639%'
            // –±—É–¥—É—î–º–æ   col::text ILIKE ?  OR ‚Ä¶
            const likeBlock = debtCols
                .map(col => `${col}::text ILIKE ?`)
                .join(' OR ');
            // —Ç—Ä–µ–±–∞ —Å—Ç—ñ–ª—å–∫–∏ –∂ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —Å–∫—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            values.push(...Array(debtCols.length).fill(search));
            return `(${likeBlock})`;
        }
        
        if (typeof whereConditions[key] === 'string' && whereConditions[key].includes(',')) {
            const splitData = whereConditions[key].split(',')
            values.push(splitData)
            return `${key} = any (array[?::text[]])`
        }
        else if (typeof whereConditions[key] === 'string' && whereConditions[key].includes('_')) {
            const [date1, date2] = whereConditions[key].split('_')
            values.push(date1, date2)
            return `${key} BETWEEN ? AND ?`
        }
        else {
            values.push(whereConditions[key])
            return `${key} = ?`
        }
    }).filter(condition => condition !== null); // –§—ñ–ª—å—Ç—Ä—É—î–º–æ null —É–º–æ–≤–∏
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —É–º–æ–≤–∏ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
    if (conditions.length === 0) {
        return {
            text: '',
            value: [],
        };
    }
    
    return {
        text: ' and ' + conditions.join(' and '),
        value: values,
    }
}


const isOpenFile = (path) => {
    return new Promise((resolve, reject) => {
        fs.stat(path, (err, stat) => {
            if (err) {
                resolve(false)
            }
            resolve(true)
        })
    })
}

const removeFolder = async (path) => {
    try {
        await fsPromise.access(path)
        await fsPromise.rm(path, { recursive: true, force: true })
        return true
    }
    catch (e) {
        return false
    }
}

const formatDate = (date) => {
    const d = new Date(date);
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');

    return `${year}-${month}-${day}`;
}

const removeAfterLastSlash = (str) => {
    const lastSlashIndex = str?.lastIndexOf('/');
    return lastSlashIndex !== -1 ? str?.substring(0, lastSlashIndex) : str;
}

const addRequisiteToLandDebt = (body, requisite) => {
    const land_debt = [];

    const addDebtInfo = (debtText, requisiteText, recipientName, edrpou, account, code,amount) => {
        land_debt.push(
            [
                {
                    debtText,
                    requisiteText,
		    amount,
                    table: [
                        {
                            label: "–û—Ç—Ä–∏–º—É–≤–∞—á",
                            value: removeAfterLastSlash(recipientName),
                        },
                        {
                            label: "–ö–æ–¥ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–Ñ–î–†–ü–û–£)",
                            value: edrpou,
                        },
                        {
                            label: "–ë–∞–Ω–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞",
                            value: '–ö–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏',
                        },
                        {
                            label: "–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É (IBAN)",
                            value: account,
                        },
                        {
                            label: "–ö–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É",
                            value: code,
                        }
                    ]
                }
            ]
        )
    };

    if (body?.non_residential_debt > 0) {
        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ —Å–ø–ª–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫—É –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º–µ –º–∞–π–Ω–æ, –≤—ñ–¥–º—ñ–Ω–Ω–µ –≤—ñ–¥ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏, —Å–ø–ª–∞—á–µ–Ω–æ–≥–æ —Ñ—ñ–∑–∏—á–Ω–∏–º–∏ –æ—Å–æ–±–∞–º–∏, —è–∫—ñ —î –≤–ª–∞—Å–Ω–∏–∫–∞–º–∏ –æ–±'—î–∫—Ç—ñ–≤ <b>–Ω–µ–∂–∏—Ç–ª–æ–≤–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</b> –≤ —Å—É–º—ñ ${body.non_residential_debt} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ :",
            requisite.non_residential_debt_recipientname,
            requisite.non_residential_debt_edrpou,
            requisite.non_residential_debt_account,
            '18010300',
	    body.non_residential_debt);
    }

    if (body?.residential_debt > 0) {
        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ —Å–ø–ª–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫—É –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º–µ –º–∞–π–Ω–æ, –≤—ñ–¥–º—ñ–Ω–Ω–µ –≤—ñ–¥ –∑–µ–º–µ–ª—å–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏, —Å–ø–ª–∞—á–µ–Ω–∏–π —Ñ—ñ–∑–∏—á–Ω–∏–º–∏ –æ—Å–æ–±–∞–º–∏, —è–∫—ñ —î –≤–ª–∞—Å–Ω–∏–∫–∞–º–∏ –æ–±'—î–∫—Ç—ñ–≤ <b>–∂–∏—Ç–ª–æ–≤–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</b> –≤ —Å—É–º—ñ ${body.residential_debt} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ :",
            requisite.residential_debt_recipientname,
            requisite.residential_debt_edrpou,
            requisite.residential_debt_account,
            '18010200',
	     body.residential_debt);
    }

    if (body?.land_debt > 0) {
        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ —Å–ø–ª–∞—Ç–∏ <b>–∑–µ–º–µ–ª—å–Ω–æ–º—É –ø–æ–¥–∞—Ç–∫—É</b> –∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –æ—Å—ñ–± –≤ —Å—É–º—ñ ${body.land_debt} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ :",
            requisite.land_debt_recipientname,
            requisite.land_debt_edrpou,
            requisite.land_debt_account,
            '18010700',
	    body.land_debt);
    }

    if (body?.orenda_debt > 0) {
        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ —Å–ø–ª–∞—Ç–∏ <b>–æ—Ä–µ–Ω–¥—ñ –∑–µ–º–ª—ñ</b> –∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –æ—Å—ñ–± –≤ —Å—É–º—ñ ${body.orenda_debt} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ :",
            requisite.orenda_debt_recipientname,
            requisite.orenda_debt_edrpou,
            requisite.orenda_debt_account,
            '18010900',
	    body.orenda_debt);
    }

    if (body?.mpz > 0) {
        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ —Å–ø–ª–∞—Ç–∏ <b>–º—ñ–Ω—ñ–º–∞–ª—å–Ω—å–Ω–æ–º—É –ø–æ–¥–∞—Ç–∫–æ–≤–æ–º—É –∑–∞–±–æ–≤'—è–∑–∞–Ω–Ω—é</b> –∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –æ—Å—ñ–± –≤ —Å—É–º—ñ ${body.mpz} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ :",
            requisite.mpz_recipientname,
            requisite.mpz_edrpou,
            requisite.mpz_account,
            '11011300',
	    body.mpz);
    }

    return land_debt;
};

const addRequisiteToWaterDebt = (body, requisite) => {
    const water_debt = [];

    //console.log("üìå –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —É addRequisiteToWaterDebt:", body);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±–æ—Ä–≥ –≤–∑–∞–≥–∞–ª—ñ
    if (!body?.charge || isNaN(body.charge) || parseFloat(body.charge) <= 0) {
        console.warn("‚ö†Ô∏è –ù–µ–º–∞—î –±–æ—Ä–≥—É –∞–±–æ —Å—É–º–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞:", body?.charge);
        return []; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
    }

        const addDebtInfo = (debtText, requisiteText, recipientName, edrpou, account, purpose) => {
        water_debt.push({
            debtText,
            requisiteText,
            table: [
                { label: "–û—Ç—Ä–∏–º—É–≤–∞—á", value: recipientName },
                { label: "–ö–æ–¥ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–Ñ–î–†–ü–û–£)", value: edrpou },
                { label: "–ë–∞–Ω–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞", value: requisite.file || "–ö–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏" },
                { label: "–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É (IBAN)", value: account },
                { label: "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É", value: purpose },
            ],
        });
    };
    //console.log("üõ† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ—Å–ª—É–≥–∏:", body?.service);

    if (body?.service === "–¢–ü–í") {
        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –¢–ü–í
        purposeText = `–ó–∞ –ø–æ–≤–æ–¥–∂–µ–Ω–Ω—è –∑ –¢–ü–í. ${body.payerident}, ${body.adress}, ${body.fio}`;
        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ –æ–ø–ª–∞—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ (–¢–ü–í) –≤ —Å—É–º—ñ ${body.charge} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:",
            requisite.water_recipientname,
            requisite.water_edrpou,
            requisite.water_account,
            purposeText
        );
    } else if (body?.service === "–ö–≤–∞—Ä—Ç–∏—Ä–Ω–∞ –ø–ª–∞—Ç–∞") {
        // –†–æ–∑–±–∏—Ä–∞—î–º–æ –∞–¥—Ä–µ—Å—É –Ω–∞ —Å–∫–ª–∞–¥–æ–≤—ñ
        const [city, street, house, apartment] = body.adress.split(',').map(item => item.trim());

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ—ó –ø–ª–∞—Ç–∏
        purposeText = `–û–ø–ª–∞—Ç–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ ${body.fio}, ${house}, ${apartment} (–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞ - ${body.charge} –≥—Ä–Ω)`;

        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ –æ–ø–ª–∞—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ (–ö–≤–∞—Ä—Ç–∏—Ä–Ω–∞ –ø–ª–∞—Ç–∞) –≤ —Å—É–º—ñ ${body.charge} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:",
            requisite.water_recipientname,
            requisite.water_edrpou,
            requisite.water_account,
            purposeText
        );
    } else {
        // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ—Å–ª—É–≥ (—è–∫—â–æ –∑'—è–≤–ª—è—Ç—å—Å—è)
        purposeText = `–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥ ${body.service}. ${body.fio}, ${body.adress} (—Å—É–º–∞ - ${body.charge} –≥—Ä–Ω)`;

        addDebtInfo(
            `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑—ñ –æ–ø–ª–∞—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ (${body.service}) –≤ —Å—É–º—ñ ${body.charge} –≥—Ä–Ω.`,
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:",
            requisite.water_recipientname,
            requisite.water_edrpou,
            requisite.water_account,
            purposeText
        );
    }

//console.log("üìå –ü–æ–≤–Ω–∏–π –≤–º—ñ—Å—Ç water_debt:", JSON.stringify(water_debt, null, 2));
//console.log("üìå –ß–∏ —î result –º–∞—Å–∏–≤–æ–º?", Array.isArray(water_debt));
    return water_debt;
};


const addRequisiteToAdminServiceDebt = (account, service) => {
    const admin_service_debt = [];
  
    const addDebtInfo = (debtText, requisiteText, serviceName, edrpou, iban, code,account_number) => {
      admin_service_debt.push([
        {
          debtText,
          requisiteText,
          table: [
            { label: "–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É", value: account_number        },
            { label: "–ü–æ—Å–ª—É–≥–∞",                         value: serviceName },
            { label: "–ö–æ–¥ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–Ñ–î–†–ü–û–£)",         value: edrpou      },
            { label: "–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É (IBAN)",             value: iban        },
            { label: "–ö–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É", value: code        }
          ]
        }
      ]);
    };
  
    if (account.amount > 0) {
      addDebtInfo(
        `–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –ø–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ–π –ø–æ—Å–ª—É–∑—ñ "${service.name}" –≤ —Å—É–º—ñ ${account.amount} –≥—Ä–Ω.`,
        "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:",
        service.name,
        service.edrpou,
        service.iban,
        service.identifier,
        account.account_number     
      );
    }
  
    return admin_service_debt;
  };
  

  
  const validateSortParams = (sortBy, sortDirection) => {
    const { allowedSortFields, validateSortDirection } = require('./constants');
    
    const validSortBy = allowedSortFields.includes(sortBy) ? sortBy : 'name';
    const validSortDirection = validateSortDirection(sortDirection);
    
    return {
        sortBy: validSortBy,
        sortDirection: validSortDirection
    };
};
const buildOrderByClause = (sortBy, sortDirection) => {
    const { getSafeSortField, validateSortDirection } = require('./constants');
    
    const safeSortField = getSafeSortField(sortBy);
    const safeSortDirection = validateSortDirection(sortDirection);
    
    let orderClause = '';
    
    if (sortBy === 'total_debt') {
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –æ–±—á–∏—Å–ª–µ–Ω–æ–º—É –ø–æ–ª—é
        orderClause = `ORDER BY (COALESCE(non_residential_debt, 0) + COALESCE(residential_debt, 0) + COALESCE(land_debt, 0) + COALESCE(orenda_debt, 0) + COALESCE(mpz, 0)) ${safeSortDirection.toUpperCase()}`;
    } else if (sortBy === 'name') {
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–º–µ–Ω—ñ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É
        orderClause = `ORDER BY LOWER(name) ${safeSortDirection.toUpperCase()}`;
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        orderClause = `ORDER BY ${safeSortField} ${safeSortDirection.toUpperCase()}`;
    }
    
    // –î–æ–¥–∞—î–º–æ –≤—Ç–æ—Ä–∏–Ω–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
    if (sortBy !== 'id') {
        orderClause += `, id ${safeSortDirection.toUpperCase()}`;
    }
    
    return orderClause;
};
const logSortingParams = (sortBy, sortDirection) => {
    //console.log(`üîÑ Sorting params: field="${sortBy}", direction="${sortDirection}"`);
};

module.exports = {
    paginate,
    paginationData,
    filterRequestBody,
    filterData,
    isValidDate,
    buildWhereCondition,
    debtCols,
    validateSortParams,
    buildOrderByClause,
    logSortingParams,
    isOpenFile,
    removeFolder,
    formatDate,
    removeAfterLastSlash,
    addRequisiteToLandDebt,
    addRequisiteToWaterDebt,
    addRequisiteToAdminServiceDebt
}

