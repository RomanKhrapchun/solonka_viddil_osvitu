import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';
import readline from 'readline';

// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  purple: '\x1b[35m'
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
const log = {
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  step: (msg) => console.log(`\n${colors.blue}${msg}${colors.reset}`),
  title: (msg) => console.log(`${colors.purple}${msg}${colors.reset}`)
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
function runCommand(command, description, options = {}) {
  log.info(`–í–∏–∫–æ–Ω—É—î–º–æ: ${command}`);
  
  try {
    const result = execSync(command, {
      stdio: options.silent ? 'pipe' : 'inherit',
      encoding: 'utf8',
      cwd: process.cwd(),
      ...options
    });
    
    if (!options.silent) {
      log.success(`${description} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    }
    
    return { success: true, output: result };
  } catch (error) {
    log.error(`${description} - –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å!`);
    
    if (error.stdout) {
      console.log('üìÑ –í–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏:');
      console.log(error.stdout);
    }
    
    if (error.stderr) {
      console.log('üìÑ –ü–æ–º–∏–ª–∫–∏:');
      console.log(error.stderr);
    }
    
    return { success: false, error: error.message, code: error.status };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
function fileExists(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch {
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
function getDirectorySize(dirPath) {
  try {
    if (os.platform() === 'win32') {
      // Windows: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PowerShell
      const result = execSync(`powershell "(Get-ChildItem '${dirPath}' -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB"`, { encoding: 'utf8' });
      const sizeMB = parseFloat(result.trim());
      return sizeMB > 1 ? `${sizeMB.toFixed(1)}MB` : `${(sizeMB * 1024).toFixed(0)}KB`;
    } else {
      // Linux/Mac
      const result = execSync(`du -sh "${dirPath}" 2>/dev/null || echo "–Ω–µ–≤—ñ–¥–æ–º–æ"`, { encoding: 'utf8' });
      return result.trim().split('\t')[0];
    }
  } catch {
    return '–Ω–µ–≤—ñ–¥–æ–º–æ';
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ñ–∞–π–ª—ñ–≤
function countFiles(dirPath, extension) {
  try {
    const files = fs.readdirSync(dirPath, { recursive: true });
    return files.filter(file => file.endsWith(extension)).length;
  } catch {
    return 0;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
function openDirectory(dirPath) {
  const platform = os.platform();
  let command;
  
  switch (platform) {
    case 'win32':
      command = `explorer "${dirPath}"`;
      break;
    case 'darwin':
      command = `open "${dirPath}"`;
      break;
    case 'linux':
      command = `xdg-open "${dirPath}"`;
      break;
    default:
      log.warning('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó');
      return;
  }
  
  try {
    execSync(command);
    log.info('–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è dist/ –≤—ñ–¥–∫—Ä–∏—Ç–∞');
  } catch {
    log.warning('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function askUser(question) {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function smartBuild() {
  const startTime = Date.now();
  
  console.clear();
  log.title('üöÄ Smart Build - ES Modules –≤–µ—Ä—Å—ñ—è');
  log.title('=====================================');
  console.log(`üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${os.platform()}`);
  console.log(`üìç Node.js: ${process.version}`);
  console.log(`üìç –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ${process.cwd()}`);
  
  // –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  log.step('1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...');
  
  if (!fileExists('package.json')) {
    log.error('package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    log.warning('–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ –≤–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó front/');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  log.success('package.json –∑–Ω–∞–π–¥–µ–Ω–æ');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –º–æ–¥—É–ª—ñ–≤
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (packageJson.type === 'module') {
      log.success('ES Modules –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    } else {
      log.info('CommonJS –º–æ–¥—É–ª—ñ (—Ü–µ —Ç–µ–∂ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    }
  } catch {
    log.warning('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ package.json');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js —Ç–∞ npm
  const nodeCheck = runCommand('node --version', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js', { silent: true });
  const npmCheck = runCommand('npm --version', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm', { silent: true });
  
  if (!nodeCheck.success || !npmCheck.success) {
    log.error('Node.js –∞–±–æ npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  log.success(`Node.js: ${nodeCheck.output.trim()}`);
  log.success(`npm: ${npmCheck.output.trim()}`);
  
  // –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
  log.step('2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
  
  if (!fileExists('node_modules')) {
    log.warning('node_modules –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ...');
    const installResult = runCommand('npm install', '–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π');
    if (!installResult.success) {
      log.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ');
      await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
      process.exit(1);
    }
  } else {
    log.success('node_modules –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
  
  // –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–µ—Å—Ç—ñ–≤
  log.step('3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç—ñ–≤...');
  
  const testFiles = [
    'src/test/setup.js',
    'src/test/__mocks__/index.js'
  ];
  
  let testsFound = false;
  testFiles.forEach(file => {
    if (fileExists(file)) {
      log.success(`–ó–Ω–∞–π–¥–µ–Ω–æ: ${file}`);
      testsFound = true;
    } else {
      log.warning(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${file}`);
    }
  });
  
  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ (Windows —Å—É–º—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è)
  try {
    let testCount = 0;
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    function findTestFiles(dir) {
      try {
        const entries = fs.readdirSync(dir, { withFileTypes: true });
        for (const entry of entries) {
          const fullPath = path.join(dir, entry.name);
          if (entry.isDirectory() && entry.name !== 'node_modules' && entry.name !== 'dist') {
            findTestFiles(fullPath);
          } else if (entry.isFile() && (entry.name.endsWith('.test.js') || entry.name.endsWith('.test.jsx'))) {
            testCount++;
          }
        }
      } catch {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É
      }
    }
    
    if (fileExists('src')) {
      findTestFiles('src');
    }
    
    log.info(`–ó–Ω–∞–π–¥–µ–Ω–æ ${testCount} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤`);
    
    if (testCount > 0) {
      testsFound = true;
    }
  } catch {
    log.warning('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏');
  }
  
  // –ö—Ä–æ–∫ 4: ESLint (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
  log.step('4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ESLint...');
  
  const eslintConfigExists = fileExists('eslint.config.js') || fileExists('.eslintrc.js') || fileExists('.eslintrc.json');
  
  if (eslintConfigExists) {
    log.info('ESLint –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É...');
    
    const lintResult = runCommand('npm run lint', 'ESLint –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞');
    
    if (!lintResult.success) {
      log.error('ESLint –∑–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –∫–æ–¥—ñ!');
      console.log('\nüí° –©–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ: npm run lint:fix');
      console.log('üí° –©–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ESLint —Ç–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏: –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter');
      
      const answer = await askUser('\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–ø—Ä–∏ –ø–æ–º–∏–ª–∫–∏ ESLint? (y/n): ');
      
      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        log.error('Build —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏ ESLint');
        await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
        process.exit(1);
      }
    } else {
      log.success('–ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ESLint');
    }
  } else {
    log.info('ESLint –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
  }
  
  // –ö—Ä–æ–∫ 5: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
  if (testsFound) {
    log.step('5Ô∏è‚É£ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç—ñ–≤...');
    
    // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    const testCommands = [
      'npm run test:run',
      'npm run test -- --run',
      'npx vitest run',
      'npm test -- --run'
    ];
    
    let testResult = null;
    for (const command of testCommands) {
      log.info(`–ü—Ä–æ–±—É—î–º–æ: ${command}`);
      testResult = runCommand(command, 'Unit —Ç–µ—Å—Ç–∏');
      
      if (testResult.success) {
        break;
      }
    }
    
    if (!testResult || !testResult.success) {
      log.error('UNIT –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!');
      console.log('\nüö´ –ß–û–ú–£ BUILD –ó–ê–ë–õ–û–ö–û–í–ê–ù–û:');
      console.log('   ‚Ä¢ –£ –≤–∞—à–æ–º—É –∫–æ–¥—ñ —î –ø–æ–º–∏–ª–∫–∏ —è–∫—ñ –≤–∏—è–≤–∏–ª–∏ —Ç–µ—Å—Ç–∏');
      console.log('   ‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ª–∞–º–∞–Ω–æ–≥–æ –∫–æ–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä = –ø—Ä–æ–±–ª–µ–º–∏');
      console.log('   ‚Ä¢ Smart-build –∑–∞—Ö–∏—â–∞—î production –≤—ñ–¥ –±–∞–≥—ñ–≤');
      console.log('\nüõ†Ô∏è –©–û –†–û–ë–ò–¢–ò:');
      console.log('   1. –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –í–ò–©–ï —è–∫—ñ —Å–∞–º–µ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
      console.log('   2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run test:watch –¥–ª—è debugging');
      console.log('   3. –í–∏–ø—Ä–∞–≤—Ç–µ –∫–æ–¥ —â–æ–± —Ç–µ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏');
      console.log('   4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É');
      console.log('\n‚ùå BUILD –°–ö–ê–°–û–í–ê–ù–û –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò PRODUCTION');
      
      await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
      process.exit(1);
    }
    
    log.success('–í—Å—ñ unit —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! üéâ');
  } else {
    log.step('5Ô∏è‚É£ –¢–µ—Å—Ç–∏...');
    log.warning('–¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
  }
  
  // –ö—Ä–æ–∫ 6: –û—á–∏—â–µ–Ω–Ω—è dist
  log.step('6Ô∏è‚É£ –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ build...');
  
  if (fileExists('dist')) {
    try {
      fs.rmSync('dist', { recursive: true, force: true });
      log.success('–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π build –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      log.warning(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ dist: ${error.message}`);
    }
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é dist
  try {
    fs.mkdirSync('dist', { recursive: true });
    log.success('–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è dist —Å—Ç–≤–æ—Ä–µ–Ω–∞');
  } catch (error) {
    log.warning(`–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ dist: ${error.message}`);
  }
  
  // –ö—Ä–æ–∫ 7: Build –ø—Ä–æ–µ–∫—Ç—É
  log.step('7Ô∏è‚É£ –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É...');
  
  const buildResult = runCommand('npm run build', '–ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É');
  
  if (!buildResult.success) {
    log.error('BUILD –ü–†–û–í–ê–õ–ò–í–°–Ø!');
    console.log('\nüö´ –ú–û–ñ–õ–ò–í–Ü –ü–†–ò–ß–ò–ù–ò:');
    console.log('   ‚Ä¢ –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ –∫–æ–¥—ñ');
    console.log('   ‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (import/require)');
    console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é Vite');
    console.log('\nüõ†Ô∏è –î–ï–ë–ê–ì–Ü–ù–ì:');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–ò–©–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏');
    console.log('   ‚Ä¢ –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run dev - —á–∏ –ø—Ä–∞—Ü—é—î dev —Ä–µ–∂–∏–º?');
    
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  log.success('Build –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
  
  // –ö—Ä–æ–∫ 8: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  log.step('8Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É...');
  
  if (!fileExists('dist/index.html')) {
    log.error('index.html –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤—Å—è - –ø–æ–ª–∞–º–∞–Ω–∏–π build');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  if (!fileExists('dist/assets')) {
    log.error('–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è assets –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∞—Å—å');
    await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
    process.exit(1);
  }
  
  log.success('Build —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞');
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const endTime = Date.now();
  const duration = Math.round((endTime - startTime) / 1000);
  
  const distSize = getDirectorySize('dist');
  const jsFiles = countFiles('dist', '.js');
  const cssFiles = countFiles('dist', '.css');
  const htmlFiles = countFiles('dist', '.html');
  
  // –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
  console.log('\nüéâ SMART BUILD –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!');
  console.log('=============================================');
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê BUILD:');
  console.log(`  ‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${duration}—Å`);
  console.log(`  üì¶ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: ${distSize}`);
  console.log(`  üü® JavaScript —Ñ–∞–π–ª—ñ–≤: ${jsFiles}`);
  console.log(`  üü¶ CSS —Ñ–∞–π–ª—ñ–≤: ${cssFiles}`);
  console.log(`  üü© HTML —Ñ–∞–π–ª—ñ–≤: ${htmlFiles}`);
  console.log('\nüìÅ –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('  üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ./dist/');
  console.log('  üìã –í–º—ñ—Å—Ç –≥–æ—Ç–æ–≤–∏–π –¥–ª—è FileZilla upload');
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ - –∫–æ–¥ —è–∫—ñ—Å–Ω–∏–π');
  console.log('‚úÖ Build —É—Å–ø—ñ—à–Ω–∏–π - —Ñ–∞–π–ª–∏ –≥–æ—Ç–æ–≤—ñ');
  console.log('üåê –ú–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!');
  
  // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é dist
  console.log('\nüí° –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–∞–ø–∫—É dist –¥–ª—è FileZilla...');
  openDirectory('dist');
  
  await askUser('\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('uncaughtException', async (error) => {
  log.error(`–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(1);
});

process.on('unhandledRejection', async (reason, promise) => {
  log.error(`Unhandled Rejection: ${reason}`);
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
smartBuild().catch(async (error) => {
  log.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${error.message}`);
  await askUser('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏...');
  process.exit(1);
});