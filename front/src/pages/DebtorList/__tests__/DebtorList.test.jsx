// src/pages/DebtorList/__tests__/DebtorList.test.jsx
import { describe, it, expect, vi, beforeEach, afterEach, beforeAll } from 'vitest'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { BrowserRouter } from 'react-router-dom'
import React from 'react'

// ==================== –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –ú–û–ö–ò ====================

// üî• –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ï - –ú–æ–∫–∞—î–º–æ React —Ç–∞ Context –ø—Ä–∞–≤–∏–ª—å–Ω–æ
const mockStore = {
  user: { id: 1, name: 'Test User', fullName: 'Test User' },
  isAuth: true,
  logOff: vi.fn()
}

const MockContext = React.createContext({ store: mockStore })

// –ú–æ–∫–∞—î–º–æ main.jsx –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º Context
vi.mock('../../../main', () => ({
  Context: MockContext
}))

// –î–æ–¥–∞—Ç–∫–æ–≤–æ –º–æ–∫–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
vi.mock('../../../store/store', () => ({
  default: vi.fn(() => mockStore)
}))

vi.mock('../../../provider/NotificationProvider', () => ({
  default: ({ children }) => children
}))

// –ú–æ–∫–∞—î–º–æ react-dom/client –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è createRoot –ø–æ–º–∏–ª–æ–∫
vi.mock('react-dom/client', () => ({
  createRoot: vi.fn(() => ({
    render: vi.fn(),
    unmount: vi.fn(),
  }))
}))

// ==================== –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–Ü –ú–û–ö–ò –ë–ï–ó –ó–ú–Ü–ù–ù–ò–• ====================
vi.mock('../../../hooks/useFetch', () => ({
  default: vi.fn()
}))

vi.mock('../../../hooks/useNotification', () => ({
  useNotification: vi.fn()
}))

// Mock useNavigate globally
const mockNavigate = vi.fn()

vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom')
  return {
    ...actual,
    useNavigate: () => mockNavigate,
  }
})

// Mock –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –ø–æ–≤–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
vi.mock('../../../components/common/Table/Table', () => ({
  default: vi.fn(({ columns, dataSource, loading, onRow }) => {
    if (loading) {
      return <div data-testid="table-loading">Loading...</div>
    }

    return (
      <div data-testid="table">
        <div data-testid="table-content">
          {/* –†–µ–Ω–¥–µ—Ä–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
          <div data-testid="table-headers">
            {columns?.map((col, index) => (
              <span 
                key={index} 
                data-testid={`column-${col.dataIndex}`}
                data-title={col.title}
              >
                {col.title}
              </span>
            ))}
          </div>
          
          {/* –†–µ–Ω–¥–µ—Ä–∏–º–æ –¥–∞–Ω—ñ */}
          <div data-testid="table-data">
            {dataSource?.map((item, index) => (
              <div 
                key={index} 
                data-testid={`row-${item.id}`}
                onClick={() => onRow?.(item)}
              >
                <span data-testid={`row-${item.id}-name`}>{item.name}</span>
                <span data-testid={`row-${item.id}-debt`}>{item.total_debt}</span>
                <span data-testid={`row-${item.id}-identification`}>{item.identification}</span>
                
                {/* –†–µ–Ω–¥–µ—Ä–∏–º–æ –¥—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–Ω–¥–µ—Ä —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –∫–æ–ª–æ–Ω–∫–∏ - –ø–µ—Ä–µ–¥–∞—î–º–æ item —è–∫ —Ç—Ä–µ—Ç—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä */}
                <div data-testid={`row-${item.id}-actions`}>
                  {columns?.find(col => col.dataIndex === 'action')?.render?.(null, item, index)}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  })
}))

vi.mock('../../../components/common/Pagination/Pagination', () => ({
  default: vi.fn(({ currentPage, totalCount, pageSize, onPageChange }) => {
    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ NaN —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ—Ä–æ–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö
    const safeCurrent = Number(currentPage) || 1
    const safeTotal = Number(totalCount) || 0
    const safePageSize = Number(pageSize) || 16
    const totalPages = safeTotal > 0 ? Math.ceil(safeTotal / safePageSize) : 0


    // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    //console.log('Pagination mock - totalCount:', totalCount, 'safeTotal:', safeTotal)

    return (
      <div data-testid="pagination">
        <button 
          data-testid="prev-page" 
          onClick={() => onPageChange(Math.max(1, safeCurrent - 1))}
          disabled={safeCurrent <= 1}
        >
          Prev
        </button>
        <span data-testid="page-info">
          {safeCurrent} of {totalPages}
        </span>
        <button 
          data-testid="next-page" 
          onClick={() => onPageChange(Math.min(totalPages, safeCurrent + 1))}
          disabled={safeCurrent >= totalPages}
        >
          Next
        </button>
        <span data-testid="total-items">Total: {safeTotal}</span>
      </div>
    )
  })
}))

// –í–ò–ü–†–ê–í–õ–ï–ù–û: Button mock —Ç–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–µ–Ω–µ—Ä—É—î testid –∑ ID –µ–ª–µ–º–µ–Ω—Ç—É
vi.mock('../../../components/common/Button/Button', () => ({
  default: vi.fn((props) => {
    const { onClick, children, title, icon, size, disabled, className, ...restProps } = props
    
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
    const itemId = props.itemId || props['data-item-id'] || props.id || restProps.key
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π testid –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º itemId
    const baseTestId = title?.toLowerCase().replace(/\s+/g, '-') || 'button'
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î itemId, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ –∑ onClick —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    let fullTestId = `button-${baseTestId}`
    if (itemId) {
      fullTestId = `button-${baseTestId}-${itemId}`
    }
    
    return (
      <button 
        onClick={onClick} 
        title={title}
        disabled={disabled}
        className={className}
        data-testid={fullTestId}
        {...restProps}
      >
        {icon && <span data-testid="button-icon">{icon}</span>}
        {children}
      </button>
    )
  })
}))

vi.mock('../../../components/common/Dropdown/Dropdown', () => ({
  default: vi.fn(({ children, caption, menu, icon, iconPosition, style, childStyle, ...props }) => (
    <div data-testid="dropdown" style={style} {...props}>
      <div data-testid="dropdown-trigger">
        {caption}
        {icon && <span data-testid="dropdown-icon">{icon}</span>}
      </div>
      <div data-testid="dropdown-content" style={childStyle}>
        {menu?.map((item, index) => (
          <div 
            key={item.key || index} 
            data-testid={`dropdown-item-${item.key}`}
            onClick={item.onClick}
          >
            {item.label}
          </div>
        ))}
        {children}
      </div>
    </div>
  ))
}))

vi.mock('../../../components/common/Modal/Modal.jsx', () => ({
  default: vi.fn(({ children, onClose, onOk, title, confirmLoading, cancelText, okText, className }) => (
    <div data-testid="modal" className={className}>
      <div data-testid="modal-title">{title}</div>
      <div data-testid="modal-content">{children}</div>
      <div data-testid="modal-actions">
        <button data-testid="modal-cancel" onClick={onClose}>{cancelText || 'Cancel'}</button>
        <button data-testid="modal-ok" onClick={onOk} disabled={confirmLoading}>
          {confirmLoading ? 'Loading...' : (okText || 'OK')}
        </button>
      </div>
    </div>
  ))
}))

vi.mock('../../../components/common/Dropdown/FilterDropdown', () => ({
  default: vi.fn(({ isOpen, onClose, filterData, onFilterChange, onApplyFilter, onResetFilters, searchIcon }) => 
    isOpen ? (
      <div data-testid="filter-dropdown">
        <select 
          data-testid="filter-select"
          value={filterData?.tax_type || ''}
          onChange={(e) => onFilterChange('tax_type', e.target.value)}
        >
          <option value="">–í—Å—ñ —Ç–∏–ø–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤</option>
          <option value="residential_debt">–ñ–∏—Ç–ª–æ–≤–∞</option>
          <option value="non_residential_debt">–ù–µ–∂–∏—Ç–ª–æ–≤–∞</option>
          <option value="land_debt">–ó–µ–º–µ–ª—å–Ω–∞</option>
          <option value="orenda_debt">–û—Ä–µ–Ω–¥–Ω–∞</option>
          <option value="mpz">–ú–ü–ó</option>
        </select>
        <button data-testid="filter-apply" onClick={onApplyFilter}>–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏</button>
        <button data-testid="filter-reset" onClick={onResetFilters}>–°–∫–∏–Ω—É—Ç–∏</button>
        <button data-testid="filter-close" onClick={onClose}>–ó–∞–∫—Ä–∏—Ç–∏</button>
      </div>
    ) : null
  )
}))

vi.mock('../../../components/common/Skeleton/SkeletonPage', () => ({
  default: vi.fn(() => <div data-testid="skeleton">Loading skeleton...</div>)
}))

vi.mock('../../ErrorPage/PageError', () => ({
  default: vi.fn(() => <div data-testid="page-error">Error occurred</div>)
}))

vi.mock('react-transition-group', () => ({
  Transition: ({ children, in: inProp, nodeRef, timeout, unmountOnExit }) => {
    // –°–∏–º—É–ª—é—î–º–æ –ø–æ–≤–µ–¥—ñ–Ω–∫—É Transition - —è–∫—â–æ in=true, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –¥—ñ—Ç–µ–π –∑ —Å—Ç–µ–π—Ç–æ–º 'entered'
    if (inProp) {
      return children('entered')
    }
    // –Ø–∫—â–æ unmountOnExit=true —ñ in=false, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –Ω—ñ—á–æ–≥–æ
    if (unmountOnExit && !inProp) {
      return null
    }
    // –Ü–Ω–∞–∫—à–µ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –¥—ñ—Ç–µ–π –∑ —Å—Ç–µ–π—Ç–æ–º 'exited'
    return children('exited')
  }
}))

vi.mock('../../../utils/constants.jsx', () => ({
  generateIcon: vi.fn(() => '<svg>mock-icon</svg>'),
  iconMap: {
    phone: 'phone',
    download: 'download', 
    edit: 'edit',
    filter: 'filter',
    search: 'search',
    arrowDown: 'arrowDown',
    arrowUp: 'arrowUp'
  },
  STATUS: {
    SUCCESS: 'Success',
    PENDING: 'Pending', 
    ERROR: 'Error',
    IDLE: 'Idle'
  }
}))

vi.mock('../../../utils/function', () => ({
  fetchFunction: vi.fn(),
  hasOnlyAllowedParams: vi.fn(() => true),
  validateFilters: vi.fn(() => ({ error: false }))
}))

// ==================== TEST DATA ====================

const createMockDebtorData = (customItems = null) => ({
  items: customItems || [
    {
      id: 1,
      name: '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á',
      date: '2024-01-15',
      identification: '1234567890',
      non_residential_debt: 1500.50,
      residential_debt: 2000.00,
      land_debt: 500.25,
      orenda_debt: 1000.75,
      mpz: 300.00,
      total_debt: 5301.50
    },
    {
      id: 2,
      name: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á',
      date: '2024-01-16',
      identification: '0987654321',
      non_residential_debt: 0,
      residential_debt: 1500.00,
      land_debt: 0,
      orenda_debt: 0,
      mpz: 0,
      total_debt: 1500.00
    },
    {
      id: 3,
      name: '–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥—ñ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á',
      date: '2024-01-17',
      identification: '1122334455',
      non_residential_debt: 0,
      residential_debt: 0,
      land_debt: 0,
      orenda_debt: 0,
      mpz: 0,
      total_debt: 0
    }
  ],
  totalItems: 3,
  currentPage: 1,
  totalPages: 1
})

const mockContextValue = {
  store: mockStore
}

// ==================== HELPER FUNCTIONS ====================

const renderWithProviders = (component, options = {}) => {
  const { 
    contextValue = mockContextValue,
    ...renderOptions 
  } = options

  return render(
    <BrowserRouter>
      <MockContext.Provider value={contextValue}>
        {component}
      </MockContext.Provider>
    </BrowserRouter>,
    renderOptions
  )
}

// ==================== –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø SETUP ====================

const configureMocks = (overrides = {}) => {
  // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –º–æ–∫–∏
  vi.clearAllMocks()
  
  // –û—Ç—Ä–∏–º—É—î–º–æ mock —Ñ—É–Ω–∫—Ü—ñ—ó
  const mockUseFetch = vi.mocked(useFetch)
  const mockUseNotification = vi.mocked(useNotification)

  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  mockUseFetch.mockReturnValue({
    data: createMockDebtorData(),
    status: 'Success',
    error: null,
    retryFetch: vi.fn(),
    ...overrides.useFetch
  })

  mockUseNotification.mockReturnValue(vi.fn())

  return {
    mockUseFetch,
    mockUseNotification,
    mockNavigate
  }
}

// ==================== –î–ò–ù–ê–ú–Ü–ß–ù–Ü –Ü–ú–ü–û–†–¢–ò ====================

let DebtorList, useFetch, useNotification

beforeAll(async () => {
  // –î–∏–Ω–∞–º—ñ—á–Ω–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–∫—ñ–≤
  const debtorModule = await import('../DebtorList')
  const useFetchModule = await import('../../../hooks/useFetch')
  const useNotificationModule = await import('../../../hooks/useNotification')
  
  DebtorList = debtorModule.default
  useFetch = useFetchModule.default
  useNotification = useNotificationModule.useNotification
})

// ==================== TESTS ====================

describe('DebtorList Component', () => {
  let mocks

  beforeEach(async () => {
    vi.clearAllMocks()
    // –û—á–∏—â—É—î–º–æ mockNavigate
    mockNavigate.mockClear()
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫–∏
    mocks = configureMocks()
  })

  afterEach(() => {
    vi.clearAllMocks()
    mockNavigate.mockClear()
  })

  describe('üîÑ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', () => {
    it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é –∑ –¥–∞–Ω–∏–º–∏ –±–æ—Ä–∂–Ω–∏–∫—ñ–≤', () => {
      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('table')).toBeInTheDocument()
      expect(screen.getByTestId('table-content')).toBeInTheDocument()
      expect(screen.getByTestId('pagination')).toBeInTheDocument()
    })

    it('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º', () => {
      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('column-identification')).toBeInTheDocument()
      expect(screen.getByTestId('column-name')).toBeInTheDocument()
      expect(screen.getByTestId('column-date')).toBeInTheDocument()
      expect(screen.getByTestId('column-total_debt')).toBeInTheDocument()
    })

    it('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä—è–¥–∫–∏ –∑ –¥–∞–Ω–∏–º–∏ –±–æ—Ä–∂–Ω–∏–∫—ñ–≤', () => {
      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('row-1')).toBeInTheDocument()
      expect(screen.getByTestId('row-2')).toBeInTheDocument()
      expect(screen.getByTestId('row-3')).toBeInTheDocument()
      
      expect(screen.getByTestId('row-1-name')).toHaveTextContent('–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á')
      expect(screen.getByTestId('row-2-name')).toHaveTextContent('–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á')
      expect(screen.getByTestId('row-3-name')).toHaveTextContent('–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥—ñ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á')
    })
  })

  describe('üí∞ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±–æ—Ä–≥—É', () => {
    it('–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–æ—Ä–∂–Ω–∏–∫–∞', () => {
      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('row-1-debt')).toHaveTextContent('5301.5')
      expect(screen.getByTestId('row-2-debt')).toHaveTextContent('1500')
      expect(screen.getByTestId('row-3-debt')).toHaveTextContent('0')
    })

    it('–æ–±—Ä–æ–±–ª—è—î –Ω—É–ª—å–æ–≤—ñ —Ç–∞ undefined –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ', () => {
      const customData = createMockDebtorData([
        {
          id: 4,
          name: 'Test User',
          date: '2024-01-18',
          identification: '1111111111',
          non_residential_debt: null,
          residential_debt: undefined,
          land_debt: '',
          orenda_debt: 0,
          mpz: '0',
          total_debt: 0
        }
      ])

      configureMocks({
        useFetch: {
          data: customData,
          status: 'Success'
        }
      })

      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('row-4-debt')).toHaveTextContent('0')
    })
  })

  describe('‚è≥ –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–º–∏–ª–æ–∫', () => {
    it('–ø–æ–∫–∞–∑—É—î —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', () => {
      configureMocks({
        useFetch: {
          data: null,
          status: 'Pending',
          error: null
        }
      })

      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('skeleton')).toBeInTheDocument()
    })

    it('–ø–æ–∫–∞–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –Ω–µ–≤–¥–∞–ª–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ', () => {
      configureMocks({
        useFetch: {
          data: null,
          status: 'Error',
          error: { message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', status: 500 }
        }
      })

      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('page-error')).toBeInTheDocument()
    })
  })

  describe('üìÑ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è', () => {
    it('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é', () => {
      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('page-info')).toHaveTextContent('1 of 1')
      expect(screen.getByTestId('total-items')).toHaveTextContent('Total: 3')
    })

    it('–æ–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏', async () => {
      const user = userEvent.setup()
      
      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
      configureMocks({
        useFetch: {
          data: {
            ...createMockDebtorData(),
            totalItems: 50,
            currentPage: 1,
            totalPages: 4
          },
          status: 'Success'
        }
      })

      renderWithProviders(<DebtorList />)
      
      const nextButton = screen.getByTestId('next-page')
      expect(nextButton).not.toBeDisabled()
      
      await user.click(nextButton)
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è
      await waitFor(() => {
        expect(nextButton).toBeInTheDocument()
      })
    })
  })

  describe('üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è', () => {
    it('–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –∫–Ω–æ–ø–∫—É —Ñ—ñ–ª—å—Ç—Ä—ñ–≤', () => {
      renderWithProviders(<DebtorList />)
      
      // –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞ —Ç–µ–∫—Å—Ç–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç –º–æ–∂–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ testid
      expect(screen.getByText(/–§—ñ–ª—å—Ç—Ä–∏/)).toBeInTheDocument()
    })

    it('–≤—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ—ñ–ª—å—Ç—Ä –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É', async () => {
      const user = userEvent.setup()
      
      renderWithProviders(<DebtorList />)
      
      const filterButton = screen.getByText(/–§—ñ–ª—å—Ç—Ä–∏/)
      await user.click(filterButton)
      
      expect(screen.getByTestId('filter-dropdown')).toBeInTheDocument()
    })

    it('–¥–æ–∑–≤–æ–ª—è—î —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ —Ç–∏–ø–æ–º –ø–æ–¥–∞—Ç–∫—É', async () => {
      const user = userEvent.setup()
      
      renderWithProviders(<DebtorList />)
      
      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
      const filterButton = screen.getByText(/–§—ñ–ª—å—Ç—Ä–∏/)
      await user.click(filterButton)
      
      // –í–∏–±–∏—Ä–∞—î–º–æ —Ç–∏–ø –ø–æ–¥–∞—Ç–∫—É
      const filterSelect = screen.getByTestId('filter-select')
      await user.selectOptions(filterSelect, 'residential_debt')
      
      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
      const applyButton = screen.getByTestId('filter-apply')
      await user.click(applyButton)
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞–∫—Ä–∏–≤—Å—è
      expect(screen.queryByTestId('filter-dropdown')).not.toBeInTheDocument()
    })
  })

  describe('üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è', () => {
    it('–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É –±–æ—Ä–∂–Ω–∏–∫–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≥–ª—è–¥"', async () => {
      const user = userEvent.setup()
      
      renderWithProviders(<DebtorList />)
      
      // –í–ò–ü–†–ê–í–õ–ï–ù–û: —à—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
      const firstRow = screen.getByTestId('row-1-actions')
      const viewButton = firstRow.querySelector('button[title="–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–≤—Å—è"]')
      
      expect(viewButton).toBeInTheDocument()
      await user.click(viewButton)
      
      expect(mockNavigate).toHaveBeenCalledWith('/debtor/1')
    })

    it('–ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥—ñ–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –±–æ—Ä–∂–Ω–∏–∫—ñ–≤ –∑ –±–æ—Ä–≥–æ–º', () => {
      renderWithProviders(<DebtorList />)
      
      // –ü–µ—Ä—à–∏–π –±–æ—Ä–∂–Ω–∏–∫ –º–∞—î –±–æ—Ä–≥ - –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
      const firstRow = screen.getByTestId('row-1-actions')
      expect(firstRow.querySelector('button[title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"]')).toBeInTheDocument()
      expect(firstRow.querySelector('button[title="–†–µ–∫–≤—ñ–∑–∏—Ç–∏"]')).toBeInTheDocument()
      
      // –î—Ä—É–≥–∏–π –±–æ—Ä–∂–Ω–∏–∫ –º–∞—î –±–æ—Ä–≥ - –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
      const secondRow = screen.getByTestId('row-2-actions')
      expect(secondRow.querySelector('button[title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"]')).toBeInTheDocument()
      expect(secondRow.querySelector('button[title="–†–µ–∫–≤—ñ–∑–∏—Ç–∏"]')).toBeInTheDocument()
      
      // –¢—Ä–µ—Ç—ñ–π –±–æ—Ä–∂–Ω–∏–∫ –±–µ–∑ –±–æ—Ä–≥—É - —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥
      const thirdRow = screen.getByTestId('row-3-actions')
      expect(thirdRow.querySelector('button[title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"]')).not.toBeInTheDocument()
      expect(thirdRow.querySelector('button[title="–†–µ–∫–≤—ñ–∑–∏—Ç–∏"]')).not.toBeInTheDocument()
      expect(thirdRow.querySelector('button[title="–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–≤—Å—è"]')).toBeInTheDocument()
    })
  })

  describe('üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏', () => {
    it('–¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ', () => {
      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('dropdown')).toBeInTheDocument()
      expect(screen.getByText('–ó–∞–ø–∏—Å—ñ–≤: 16')).toBeInTheDocument()
    })

    it('–æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏', async () => {
      const user = userEvent.setup()
      
      renderWithProviders(<DebtorList />)
      
      const item32 = screen.getByTestId('dropdown-item-32')
      await user.click(item32)
      
      // –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫
      expect(screen.getByTestId('dropdown')).toBeInTheDocument()
    })
  })

  describe('üõ†Ô∏è –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö', () => {
    it('–æ–±—Ä–æ–±–ª—è—î –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫', () => {
      configureMocks({
        useFetch: {
          data: { items: null },
          status: 'Success'
        }
      })

      renderWithProviders(<DebtorList />)
      
      expect(screen.getByTestId('table')).toBeInTheDocument()
    })

    it('–æ–±—Ä–æ–±–ª—è—î –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –¥–∞–Ω–∏—Ö', () => {
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä—è–º–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è configureMocks
        const mockUseFetch = vi.mocked(useFetch)
        const mockUseNotification = vi.mocked(useNotification)
        
        // –û—á–∏—â—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –º–æ–∫–∏
        mockUseFetch.mockClear()
        mockUseNotification.mockClear()
        
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö
        mockUseFetch.mockReturnValue({
          data: {
            items: [],
            totalItems: 0,     // ‚Üê –¶–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ totalCount –≤ Pagination
            currentPage: 1,    
            totalPages: 1      
          },
          status: 'Success',
          error: null,
          retryFetch: vi.fn()
        })
        
        mockUseNotification.mockReturnValue(vi.fn())
      
        renderWithProviders(<DebtorList />)
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
        expect(screen.getByTestId('table-content')).toBeInTheDocument()
        
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ß–µ—Ä–µ–∑ –∫–æ–¥ `totalCount={data?.totalItems || 1}` 
        // –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ totalItems = 0, –≤ Pagination –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è totalCount = 1
        // –¢–æ–º—É —Ç–µ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –æ—á—ñ–∫—É–≤–∞—Ç–∏ "Total: 1", –∞ –Ω–µ "Total: 0"
        expect(screen.getByTestId('total-items')).toHaveTextContent('Total: 1')
        
        // –î–û–î–ê–¢–ö–û–í–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ç–∞–±–ª–∏—Ü—è –¥—ñ–π—Å–Ω–æ –ø–æ—Ä–æ–∂–Ω—è (—Ü–µ –≥–æ–ª–æ–≤–Ω–µ!)
        expect(screen.queryByTestId('row-1')).not.toBeInTheDocument()
        expect(screen.queryByTestId('row-2')).not.toBeInTheDocument()
        expect(screen.queryByTestId('row-3')).not.toBeInTheDocument()
        
        // –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        expect(screen.getByText('–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')).toBeInTheDocument()
      })
    })

  describe('üì± –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ', () => {
    it('–≤—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"', async () => {
      const user = userEvent.setup()
      
      renderWithProviders(<DebtorList />)
      
      // –í–ò–ü–†–ê–í–õ–ï–ù–û: —à—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
      const firstRow = screen.getByTestId('row-1-actions')
      const downloadButton = firstRow.querySelector('button[title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"]')
      
      expect(downloadButton).toBeInTheDocument()
      await user.click(downloadButton)
      
      // –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤—É –º–æ–¥–∞–ª–∫–∏
      await waitFor(() => {
        expect(screen.getByTestId('modal')).toBeInTheDocument()
      })
      
      expect(screen.getByTestId('modal-title')).toHaveTextContent('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤')
    })

    it('–∑–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏"', async () => {
      const user = userEvent.setup()
      
      renderWithProviders(<DebtorList />)
      
      // –í–ò–ü–†–ê–í–õ–ï–ù–û: —à—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
      const firstRow = screen.getByTestId('row-1-actions')
      const downloadButton = firstRow.querySelector('button[title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"]')
      
      expect(downloadButton).toBeInTheDocument()
      await user.click(downloadButton)
      
      // –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤—É –º–æ–¥–∞–ª–∫–∏
      await waitFor(() => {
        expect(screen.getByTestId('modal')).toBeInTheDocument()
      })
      
      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      const cancelButton = screen.getByTestId('modal-cancel')
      await user.click(cancelButton)
      
      // –ß–µ–∫–∞—î–º–æ —â–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–Ω–∏–∫–ª–æ
      await waitFor(() => {
        expect(screen.queryByTestId('modal')).not.toBeInTheDocument()
      })
    })
  })
})

// ==================== INTEGRATION TESTS ====================

describe('üîó DebtorList Integration Tests', () => {
  it('–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∑–∞—î–º–æ–¥—ñ—î –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é', async () => {
    const user = userEvent.setup()
    configureMocks({
      useFetch: {
        data: {
          ...createMockDebtorData(),
          totalItems: 50,
          currentPage: 1,
          totalPages: 4
        },
        status: 'Success'
      }
    })
    
    renderWithProviders(<DebtorList />)
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    expect(screen.getByTestId('table')).toBeInTheDocument()

    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
    const filterButton = screen.getByText(/–§—ñ–ª—å—Ç—Ä–∏/)
    await user.click(filterButton)
    
    // –ó–º—ñ–Ω—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
    const filterSelect = screen.getByTestId('filter-select')
    await user.selectOptions(filterSelect, 'residential_debt')
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
    const applyButton = screen.getByTestId('filter-apply')
    await user.click(applyButton)
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∞—Ü—é—î
    expect(screen.getByTestId('table')).toBeInTheDocument()
  })
})

// ==================== PERFORMANCE TESTS ====================

describe('‚ö° DebtorList Performance Tests', () => {
  it('–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤–µ–ª–∏–∫—ñ –Ω–∞–±–æ—Ä–∏ –¥–∞–Ω–∏—Ö', () => {
    const largeDataSet = createMockDebtorData(
      Array.from({ length: 100 }, (_, index) => ({
        id: index + 1,
        name: `Test User ${index + 1}`,
        date: '2024-01-15',
        identification: `123456789${index}`,
        non_residential_debt: Math.random() * 1000,
        residential_debt: Math.random() * 1000,
        land_debt: Math.random() * 1000,
        orenda_debt: Math.random() * 1000,
        mpz: Math.random() * 1000,
        total_debt: Math.random() * 5000
      }))
    )

    configureMocks({
      useFetch: {
        data: largeDataSet,
        status: 'Success'
      }
    })

    const start = performance.now()
    
    renderWithProviders(<DebtorList />)
    
    const end = performance.now()
    const renderTime = end - start

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–π–º–∞—Ç–∏ –±—ñ–ª—å—à–µ 1000–º—Å –Ω–∞–≤—ñ—Ç—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤
    expect(renderTime).toBeLessThan(1000)
    expect(screen.getByTestId('table')).toBeInTheDocument()
  })
})